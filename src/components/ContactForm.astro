---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="bg-white rounded-xl shadow-lg p-8">
    <!-- Form Container -->
    <div id="contact-form-container" class="transition-all duration-500">
        <form 
            id="contact-form"
            name="burnx-contact"
            method="POST"
            data-netlify="true"
            data-netlify-honeypot="bot-field"
            class="space-y-6"
        >
            <!-- Required hidden field for Netlify Forms -->
            <input type="hidden" name="form-name" value="burnx-contact" />
            
            <!-- Honeypot field for spam protection -->
            <p class="hidden">
                <label>
                    Don't fill this out if you're human: 
                    <input name="bot-field" />
                </label>
            </p>
            
            <div class="grid md:grid-cols-2 gap-4">
                <div>
                    <label for="firstName" class="block text-sm font-medium text-gray-700 mb-2">
                        {t('contact.form.firstName')}
                    </label>
                    <input
                        type="text"
                        id="firstName"
                        name="firstName"
                        required
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                </div>
                <div>
                    <label for="lastName" class="block text-sm font-medium text-gray-700 mb-2">
                        {t('contact.form.lastName')}
                    </label>
                    <input
                        type="text"
                        id="lastName"
                        name="lastName"
                        required
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                </div>
            </div>

            <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
                    {t('contact.form.email')}
                </label>
                <input
                    type="email"
                    id="email"
                    name="email"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                />
            </div>

            <div>
                <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">
                    {t('contact.form.subject')}
                </label>
                <select
                    id="subject"
                    name="subject"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                >
                    <option value="">{t('contact.form.selectTopic')}</option>
                    <option value="general">{t('contact.form.general')}</option>
                    <option value="support">{t('contact.form.support')}</option>
                    <option value="partnership">{t('contact.form.partnership')}</option>
                    <option value="press">{t('contact.form.press')}</option>
                    <option value="other">{t('contact.form.other')}</option>
                </select>
            </div>

            <div>
                <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
                    {t('contact.form.message')}
                </label>
                <textarea
                    id="message"
                    name="message"
                    rows="6"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 resize-none"
                ></textarea>
            </div>

            <button
                type="submit"
                id="contact-submit-btn"
                class="w-full bg-gray-900 text-white py-3 rounded-lg font-medium hover:bg-gray-800 transition-colors"
            >
                <span id="contact-btn-text">{t('contact.form.send')}</span>
                <span id="contact-btn-loader" class="hidden">
                    <svg class="animate-spin h-5 w-5 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </span>
            </button>
        </form>
    </div>
    
    <!-- Success Container (Initially Hidden) -->
    <div id="contact-success-container" class="hidden opacity-0 transition-all duration-500">
        <div class="text-center">
            <!-- Success Icon -->
            <div class="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-success-icon">
                <svg class="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            </div>
            
            <!-- Success Message -->
            <h3 class="text-2xl font-bold text-gray-900 mb-2">
                {lang === 'tr' ? 'MesajÄ±nÄ±z GÃ¶nderildi! ðŸŽ‰' : 'Message Sent! ðŸŽ‰'}
            </h3>
            <p class="text-gray-600 mb-6">
                {lang === 'tr' ? 
                    'MesajÄ±nÄ±zÄ± aldÄ±k ve en kÄ±sa sÃ¼rede size dÃ¶nÃ¼ÅŸ yapacaÄŸÄ±z.' : 
                    'We\'ve received your message and will get back to you soon.'}
            </p>
            
            <!-- Back to form button -->
            <button 
                id="contact-another-btn"
                class="text-sm text-blue-600 hover:text-blue-700 font-medium transition-colors"
            >
                {lang === 'tr' ? '+ BaÅŸka bir mesaj gÃ¶nder' : '+ Send another message'}
            </button>
        </div>
    </div>
</div>

<style>
    @keyframes success-icon {
        0% {
            transform: scale(0) rotate(-45deg);
            opacity: 0;
        }
        50% {
            transform: scale(1.1) rotate(5deg);
        }
        100% {
            transform: scale(1) rotate(0deg);
            opacity: 1;
        }
    }
    
    .animate-success-icon {
        animation: success-icon 0.6s ease-out;
    }
</style>

<script>
(function() {
    'use strict';
    
    const form = document.getElementById('contact-form');
    const formContainer = document.getElementById('contact-form-container');
    const successContainer = document.getElementById('contact-success-container');
    const submitBtn = document.getElementById('contact-submit-btn');
    const btnText = document.getElementById('contact-btn-text');
    const btnLoader = document.getElementById('contact-btn-loader');
    const anotherBtn = document.getElementById('contact-another-btn');
    
    // Handle form submission
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Get form values directly
            const firstName = document.getElementById('firstName').value.trim();
            const lastName = document.getElementById('lastName').value.trim();
            const email = document.getElementById('email').value.trim();
            const subject = document.getElementById('subject').value;
            const message = document.getElementById('message').value.trim();
            
            // Create URL-encoded body exactly like a real form submission
            const formBody = new URLSearchParams({
                'form-name': 'burnx-contact',
                'firstName': firstName,
                'lastName': lastName,
                'email': email,
                'subject': subject,
                'message': message,
                'bot-field': ''
            });
            
            // Show loading state
            if (btnText) btnText.classList.add('hidden');
            if (btnLoader) btnLoader.classList.remove('hidden');
            if (submitBtn) submitBtn.setAttribute('disabled', 'true');
            
            try {
                // Submit exactly like a real HTML form would
                const response = await fetch('/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: formBody.toString()
                });
                
                if (response.ok) {
                    // Animate transition
                    setTimeout(function() {
                        // Fade out form
                        if (formContainer) formContainer.classList.add('opacity-0', 'scale-95');
                        
                        setTimeout(function() {
                            // Hide form and show success
                            if (formContainer) formContainer.classList.add('hidden');
                            if (successContainer) {
                                successContainer.classList.remove('hidden');
                                
                                // Fade in success
                                setTimeout(function() {
                                    successContainer.classList.remove('opacity-0');
                                    successContainer.classList.add('opacity-100', 'scale-100');
                                }, 50);
                            }
                            
                            // Reset button state after success
                            if (btnText) btnText.classList.remove('hidden');
                            if (btnLoader) btnLoader.classList.add('hidden');
                            if (submitBtn) submitBtn.removeAttribute('disabled');
                        }, 300);
                    }, 500);
                    
                } else {
                    throw new Error('Submission failed');
                }
            } catch (error) {
                console.error('Form submission error:', error);
                // Reset button state
                if (btnText) btnText.classList.remove('hidden');
                if (btnLoader) btnLoader.classList.add('hidden');
                if (submitBtn) submitBtn.removeAttribute('disabled');
                
                // Show error (you could make this more elegant)
                alert('Something went wrong. Please try again or contact us directly.');
            }
        });
    }
    
    // Handle "Send another message" button
    if (anotherBtn) {
        anotherBtn.addEventListener('click', function() {
            // Reset form
            form.reset();
            
            // Animate transition back to form
            if (successContainer) {
                successContainer.classList.remove('opacity-100', 'scale-100');
                successContainer.classList.add('opacity-0', 'scale-95');
            }
            
            setTimeout(function() {
                if (successContainer) successContainer.classList.add('hidden');
                if (formContainer) formContainer.classList.remove('hidden');
                
                // Reset button state
                if (btnText) btnText.classList.remove('hidden');
                if (btnLoader) btnLoader.classList.add('hidden');
                if (submitBtn) submitBtn.removeAttribute('disabled');
                
                setTimeout(function() {
                    if (formContainer) {
                        formContainer.classList.remove('opacity-0', 'scale-95');
                        formContainer.classList.add('opacity-100', 'scale-100');
                    }
                }, 50);
            }, 300);
        });
    }
})();
</script>