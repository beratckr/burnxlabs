---
---

<div id="waitlist" class="bg-white rounded-2xl p-8 shadow-sm border border-gray-200 max-w-md mx-auto">
    <!-- Form Container -->
    <div id="form-container" class="transition-all duration-500">
        <form 
            id="waitlist-form"
            name="burnx-waitlist"
            method="POST"
            data-netlify="true"
            data-netlify-honeypot="bot-field"
            class="space-y-4"
        >
            <!-- Required hidden field for Netlify Forms -->
            <input type="hidden" name="form-name" value="burnx-waitlist" />
            
            <!-- Honeypot field for spam protection -->
            <p class="hidden">
                <label>
                    Don't fill this out if you're human: 
                    <input name="bot-field" />
                </label>
            </p>
            
            <input 
                type="email" 
                id="email-input"
                name="email"
                placeholder="Enter your email" 
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 transition-colors"
            />
            
            <input 
                type="text"
                id="firstName-input" 
                name="firstName"
                placeholder="First name (optional)" 
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 transition-colors"
            />
            
            <button 
                type="submit"
                id="submit-btn"
                class="w-full bg-purple-600 text-white py-3 rounded-lg font-medium hover:bg-purple-700 transition-all transform hover:scale-[1.02] active:scale-[0.98]"
            >
                <span id="btn-text">Join the waitlist</span>
                <span id="btn-loader" class="hidden">
                    <svg class="animate-spin h-5 w-5 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </span>
            </button>
        </form>
        
        <p class="text-sm text-gray-500 mt-4">
            Get early access and launch updates. No spam, unsubscribe anytime.
        </p>
    </div>

    <!-- Success Container (Initially Hidden) -->
    <div id="success-container" class="hidden opacity-0 transition-all duration-500">
        <div class="text-center">
            <!-- Success Icon -->
            <div class="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-success-icon">
                <svg class="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            </div>
            
            <!-- Success Message -->
            <h3 class="text-2xl font-bold text-gray-900 mb-2">You're on the list! ðŸŽ‰</h3>
            <p class="text-gray-600 mb-1">
                We've added <span id="user-email" class="font-medium text-purple-600"></span> to our waitlist.
            </p>
            <p class="text-gray-600 mb-6">
                You'll be the first to know when BurnX launches!
            </p>
            
            <!-- Next Actions -->
            <div class="space-y-4">
                <!-- Social Links -->
                <div>
                    <p class="text-sm text-gray-500 mb-3">Follow our journey:</p>
                    <div class="flex justify-center space-x-4">
                        <a href="#" class="text-gray-400 hover:text-purple-600 transition-colors">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
                            </svg>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-purple-600 transition-colors">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zM5.838 12a6.162 6.162 0 1112.324 0 6.162 6.162 0 01-12.324 0zM12 16a4 4 0 110-8 4 4 0 010 8zm4.965-10.405a1.44 1.44 0 112.881.001 1.44 1.44 0 01-2.881-.001z"></path>
                            </svg>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-purple-600 transition-colors">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path>
                            </svg>
                        </a>
                    </div>
                </div>
                
                <!-- Add Another Email -->
                <button 
                    id="add-another-btn"
                    class="text-sm text-purple-600 hover:text-purple-700 font-medium transition-colors"
                >
                    + Add another email
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    @keyframes success-icon {
        0% {
            transform: scale(0) rotate(-45deg);
            opacity: 0;
        }
        50% {
            transform: scale(1.1) rotate(5deg);
        }
        100% {
            transform: scale(1) rotate(0deg);
            opacity: 1;
        }
    }
    
    .animate-success-icon {
        animation: success-icon 0.6s ease-out;
    }
</style>

<script>
    const form = document.getElementById('waitlist-form') as HTMLFormElement;
    const formContainer = document.getElementById('form-container');
    const successContainer = document.getElementById('success-container');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = document.getElementById('btn-text');
    const btnLoader = document.getElementById('btn-loader');
    const userEmailSpan = document.getElementById('user-email');
    const addAnotherBtn = document.getElementById('add-another-btn');
    const emailInput = document.getElementById('email-input') as HTMLInputElement;
    const firstNameInput = document.getElementById('firstName-input') as HTMLInputElement;
    
    // Handle form submission
    form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Get form data
        const formData = new FormData(form);
        const email = formData.get('email') as string;
        const firstName = formData.get('firstName') as string;
        
        // Show loading state
        btnText?.classList.add('hidden');
        btnLoader?.classList.remove('hidden');
        submitBtn?.setAttribute('disabled', 'true');
        
        try {
            // Submit to Netlify Forms
            const response = await fetch('/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams(formData as any).toString()
            });
            
            if (response.ok) {
                // Show user's email in success message
                if (userEmailSpan) {
                    userEmailSpan.textContent = email;
                }
                
                // Animate transition
                setTimeout(() => {
                    // Fade out form
                    formContainer?.classList.add('opacity-0', 'scale-95');
                    
                    setTimeout(() => {
                        // Hide form and show success
                        formContainer?.classList.add('hidden');
                        successContainer?.classList.remove('hidden');
                        
                        // Fade in success
                        setTimeout(() => {
                            successContainer?.classList.remove('opacity-0');
                            successContainer?.classList.add('opacity-100', 'scale-100');
                        }, 50);
                    }, 300);
                }, 500);
                
                // Store submission in localStorage to prevent duplicates
                const submissions = JSON.parse(localStorage.getItem('waitlist_submissions') || '[]');
                submissions.push({ email, firstName, timestamp: new Date().toISOString() });
                localStorage.setItem('waitlist_submissions', JSON.stringify(submissions));
                
            } else {
                throw new Error('Submission failed');
            }
        } catch (error) {
            console.error('Form submission error:', error);
            // Reset button state
            btnText?.classList.remove('hidden');
            btnLoader?.classList.add('hidden');
            submitBtn?.removeAttribute('disabled');
            
            // Show error (you could make this more elegant)
            alert('Something went wrong. Please try again or contact support.');
        }
    });
    
    // Handle "Add another email" button
    addAnotherBtn?.addEventListener('click', () => {
        // Reset form
        form.reset();
        
        // Animate transition back to form
        successContainer?.classList.remove('opacity-100', 'scale-100');
        successContainer?.classList.add('opacity-0', 'scale-95');
        
        setTimeout(() => {
            successContainer?.classList.add('hidden');
            formContainer?.classList.remove('hidden');
            
            // Reset button state
            btnText?.classList.remove('hidden');
            btnLoader?.classList.add('hidden');
            submitBtn?.removeAttribute('disabled');
            
            setTimeout(() => {
                formContainer?.classList.remove('opacity-0', 'scale-95');
                formContainer?.classList.add('opacity-100', 'scale-100');
                
                // Focus on email input
                emailInput?.focus();
            }, 50);
        }, 300);
    });
    
    // Check if user has already submitted
    document.addEventListener('DOMContentLoaded', () => {
        const submissions = JSON.parse(localStorage.getItem('waitlist_submissions') || '[]');
        if (submissions.length > 0) {
            // Could show a different message for returning users
            console.log('User has already joined waitlist:', submissions);
        }
    });
</script>