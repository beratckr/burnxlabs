---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Define translations for the form
const formTranslations = {
    en: {
        emailPlaceholder: "Enter your email",
        firstNamePlaceholder: "First name (optional)",
        submitButton: "Join the waitlist",
        disclaimer: "Get early access and launch updates. No spam, unsubscribe anytime.",
        successTitle: "You're on the list! ðŸŽ‰",
        successMessage: "We've added",
        successMessage2: "to our waitlist.",
        successMessage3: "You'll be the first to know when BurnX launches!",
        alreadyOnList: "You're already on the list! ðŸ‘‹",
        alreadyMessage: "We have your email and you'll be among the first to know when BurnX launches!",
        addAnother: "+ Add another email",
        emailError: "Please enter a valid email address",
        emailErrorTemp: "Please use a valid email address (no temporary emails)"
    },
    tr: {
        emailPlaceholder: "E-posta adresinizi girin",
        firstNamePlaceholder: "AdÄ±nÄ±z (isteÄŸe baÄŸlÄ±)",
        submitButton: "Bekleme listesine katÄ±l",
        disclaimer: "Erken eriÅŸim ve lansman gÃ¼ncellemeleri alÄ±n. Spam yok, istediÄŸiniz zaman aboneliÄŸi iptal edebilirsiniz.",
        successTitle: "Listedesiniz! ðŸŽ‰",
        successMessage: "",
        successMessage2: "adresini bekleme listemize ekledik.",
        successMessage3: "BurnX lansmanÄ±nda ilk siz haberdar olacaksÄ±nÄ±z!",
        alreadyOnList: "Zaten listedesiniz! ðŸ‘‹",
        alreadyMessage: "E-postanÄ±z kayÄ±tlÄ± ve BurnX lansmanÄ±nda ilk haberdar olacaksÄ±nÄ±z!",
        addAnother: "+ BaÅŸka bir e-posta ekle",
        emailError: "LÃ¼tfen geÃ§erli bir e-posta adresi girin",
        emailErrorTemp: "LÃ¼tfen geÃ§erli bir e-posta adresi kullanÄ±n (geÃ§ici e-postalar kabul edilmez)"
    }
};

const texts = formTranslations[lang] || formTranslations.en;
---

<div id="waitlist" class="bg-white rounded-2xl p-8 shadow-sm border border-gray-200 max-w-md mx-auto">
    <!-- Form Container -->
    <div id="form-container" class="transition-all duration-500">
        <form 
            id="waitlist-form"
            name="burnx-waitlist"
            method="POST"
            data-netlify="true"
            data-netlify-honeypot="bot-field"
            class="space-y-4"
        >
            <!-- Required hidden field for Netlify Forms -->
            <input type="hidden" name="form-name" value="burnx-waitlist" />
            
            <!-- Honeypot field for spam protection -->
            <p class="hidden">
                <label>
                    Don't fill this out if you're human: 
                    <input name="bot-field" />
                </label>
            </p>
            
            <div>
                <input 
                    type="email" 
                    id="email-input"
                    name="email"
                    placeholder={texts.emailPlaceholder} 
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 transition-colors"
                />
                <p id="email-error" class="hidden text-red-500 text-sm mt-1" data-default-text={texts.emailError} data-temp-text={texts.emailErrorTemp}>{texts.emailError}</p>
            </div>
            
            <input 
                type="text"
                id="firstName-input" 
                name="firstName"
                placeholder={texts.firstNamePlaceholder} 
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 transition-colors"
            />
            
            <button 
                type="submit"
                id="submit-btn"
                class="w-full bg-purple-600 text-white py-3 rounded-lg font-medium hover:bg-purple-700 transition-all transform hover:scale-[1.02] active:scale-[0.98]"
            >
                <span id="btn-text">{texts.submitButton}</span>
                <span id="btn-loader" class="hidden">
                    <svg class="animate-spin h-5 w-5 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </span>
            </button>
        </form>
        
        <p class="text-sm text-gray-500 mt-4">
            {texts.disclaimer}
        </p>
    </div>

    <!-- Success Container (Initially Hidden) -->
    <div id="success-container" class="hidden opacity-0 transition-all duration-500">
        <div class="text-center">
            <!-- Success Icon -->
            <div class="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-success-icon">
                <svg class="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            </div>
            
            <!-- Success Message -->
            <h3 class="text-2xl font-bold text-gray-900 mb-2" data-success-text={texts.successTitle} data-already-text={texts.alreadyOnList}>{texts.successTitle}</h3>
            <p class="text-gray-600 mb-1">
                {texts.successMessage} <span id="user-email" class="font-medium text-purple-600"></span> {texts.successMessage2}
            </p>
            <p class="text-gray-600 mb-6" data-success-text={texts.successMessage3} data-already-text={texts.alreadyMessage}>
                {texts.successMessage3}
            </p>
            
            <!-- Next Actions -->
            <div class="mt-6">
                <!-- Add Another Email -->
                <button 
                    id="add-another-btn"
                    class="text-sm text-purple-600 hover:text-purple-700 font-medium transition-colors"
                >
                    {texts.addAnother}
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    @keyframes success-icon {
        0% {
            transform: scale(0) rotate(-45deg);
            opacity: 0;
        }
        50% {
            transform: scale(1.1) rotate(5deg);
        }
        100% {
            transform: scale(1) rotate(0deg);
            opacity: 1;
        }
    }
    
    .animate-success-icon {
        animation: success-icon 0.6s ease-out;
    }
    
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-10px); }
        75% { transform: translateX(10px); }
    }
    
    .animate-shake {
        animation: shake 0.5s ease-in-out;
    }
</style>

<script>
(function() {
    'use strict';
    
    const form = document.getElementById('waitlist-form');
    const formContainer = document.getElementById('form-container');
    const successContainer = document.getElementById('success-container');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = document.getElementById('btn-text');
    const btnLoader = document.getElementById('btn-loader');
    const userEmailSpan = document.getElementById('user-email');
    const addAnotherBtn = document.getElementById('add-another-btn');
    const emailInput = document.getElementById('email-input');
    const firstNameInput = document.getElementById('firstName-input');
    const emailError = document.getElementById('email-error');
    
    // Rate limiting and spam protection
    const RATE_LIMIT_KEY = 'waitlist_rate_limit';
    const SUBMISSION_COOLDOWN = 60000; // 1 minute between submissions
    const MAX_SUBMISSIONS_PER_DAY = 5; // Max 5 submissions per day per device
    
    // Email validation function
    function validateEmail(email) {
        // More comprehensive email validation regex
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return emailRegex.test(email);
    }
    
    // Check for suspicious patterns
    function isSuspiciousEmail(email) {
        // Block disposable email domains
        const disposableDomains = [
            'tempmail.com', 'throwaway.email', '10minutemail.com', 
            'guerrillamail.com', 'mailinator.com', 'temp-mail.org',
            'yopmail.com', 'trash-mail.com', 'sharklasers.com'
        ];
        
        const parts = email.split('@');
        if (parts.length !== 2) {
            return true; // Invalid email format
        }
        
        const domain = parts[1].toLowerCase();
        for (let i = 0; i < disposableDomains.length; i++) {
            if (domain.includes(disposableDomains[i])) {
                return true;
            }
        }
        
        // Block emails with too many numbers (often spam)
        const numbersInLocal = (email.split('@')[0].match(/\d/g) || []).length;
        if (numbersInLocal > 4) {
            return true;
        }
        
        // Block emails with suspicious patterns
        const suspiciousPatterns = /test|spam|fake|dummy|example\.com/i;
        if (suspiciousPatterns.test(email)) {
            return true;
        }
        
        return false;
    }
    
    // Rate limiting check
    function checkRateLimit() {
        const now = Date.now();
        const rateData = JSON.parse(localStorage.getItem(RATE_LIMIT_KEY) || '{}');
        
        // Check last submission time
        if (rateData.lastSubmission) {
            const timeSinceLastSubmission = now - rateData.lastSubmission;
            if (timeSinceLastSubmission < SUBMISSION_COOLDOWN) {
                const waitTime = Math.ceil((SUBMISSION_COOLDOWN - timeSinceLastSubmission) / 1000);
                return { 
                    allowed: false, 
                    message: `Please wait ${waitTime} seconds before submitting again.` 
                };
            }
        }
        
        // Check daily limit
        const today = new Date().toDateString();
        if (rateData.date !== today) {
            // Reset for new day
            rateData.date = today;
            rateData.count = 0;
        }
        
        if (rateData.count >= MAX_SUBMISSIONS_PER_DAY) {
            return { 
                allowed: false, 
                message: 'Daily submission limit reached. Please try again tomorrow.' 
            };
        }
        
        return { allowed: true };
    }
    
    // Update rate limit data
    function updateRateLimit() {
        const now = Date.now();
        const today = new Date().toDateString();
        const rateData = JSON.parse(localStorage.getItem(RATE_LIMIT_KEY) || '{}');
        
        if (rateData.date !== today) {
            rateData.date = today;
            rateData.count = 0;
        }
        
        rateData.lastSubmission = now;
        rateData.count = (rateData.count || 0) + 1;
        
        localStorage.setItem(RATE_LIMIT_KEY, JSON.stringify(rateData));
    }
    
    // Real-time email validation
    if (emailInput) {
        emailInput.addEventListener('blur', function() {
            const email = emailInput.value.trim();
            if (email && !validateEmail(email)) {
                if (emailError) emailError.classList.remove('hidden');
                emailInput.classList.add('border-red-500');
                emailInput.classList.remove('border-gray-300');
            } else {
                if (emailError) emailError.classList.add('hidden');
                emailInput.classList.remove('border-red-500');
                emailInput.classList.add('border-gray-300');
            }
        });
    }
    
    // Clear error on input
    if (emailInput) {
        emailInput.addEventListener('input', function() {
            if (emailError && !emailError.classList.contains('hidden')) {
                emailError.classList.add('hidden');
                emailError.textContent = emailError.getAttribute('data-default-text') || 'Please enter a valid email address'; // Reset to default message
                emailInput.classList.remove('border-red-500');
                emailInput.classList.add('border-gray-300');
            }
        });
    }
    
    // Handle form submission
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
        
        // Get form data
        const formData = new FormData(form);
        const email = (formData.get('email') || '').toString().trim();
        const firstName = (formData.get('firstName') || '').toString().trim();
        
        console.log('Form submitted - Email:', email, 'FirstName:', firstName);
        
        // Check rate limiting first
        const rateCheck = checkRateLimit();
        if (!rateCheck.allowed) {
            alert(rateCheck.message);
            return;
        }
        
        // Validate email format
        if (!validateEmail(email)) {
            if (emailError) emailError.classList.remove('hidden');
            if (emailInput) {
                emailInput.classList.add('border-red-500');
                emailInput.classList.remove('border-gray-300');
                emailInput.focus();
                
                // Shake animation for the input
                emailInput.classList.add('animate-shake');
                setTimeout(function() {
                    emailInput.classList.remove('animate-shake');
                }, 500);
            }
            
            return; // Exit early if email is invalid
        }
        
        // Check for suspicious email patterns
        if (isSuspiciousEmail(email)) {
            if (emailError) {
                emailError.textContent = emailError.getAttribute('data-temp-text') || 'Please use a valid email address (no temporary emails)';
                emailError.classList.remove('hidden');
            }
            if (emailInput) {
                emailInput.classList.add('border-red-500');
                emailInput.focus();
            }
            return;
        }
        
        // No duplicate checking - let Netlify handle it server-side
        console.log('Submitting to Netlify...');
        
        // Show loading state for new submissions
        console.log('New submission, sending to Netlify...');
        if (btnText) btnText.classList.add('hidden');
        if (btnLoader) btnLoader.classList.remove('hidden');
        if (submitBtn) submitBtn.setAttribute('disabled', 'true');
        
        try {
            // Submit to Netlify Forms
            const response = await fetch('/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams(formData).toString()
            });
            
            if (response.ok) {
                // Show success message
                const successTitle = document.querySelector('#success-container h3');
                const successDesc = document.querySelector('#success-container p:nth-of-type(2)');
                
                if (successTitle) {
                    successTitle.textContent = successTitle.getAttribute('data-success-text') || 'You\'re on the list! ðŸŽ‰';
                }
                if (successDesc) {
                    successDesc.textContent = successDesc.getAttribute('data-success-text') || 'You\'ll be the first to know when BurnX launches!';
                }
                
                // Show user's email in success message
                if (userEmailSpan) {
                    userEmailSpan.textContent = email;
                }
                
                // Animate transition
                setTimeout(function() {
                    // Fade out form
                    if (formContainer) formContainer.classList.add('opacity-0', 'scale-95');
                    
                    setTimeout(function() {
                        // Hide form and show success
                        if (formContainer) formContainer.classList.add('hidden');
                        if (successContainer) {
                            successContainer.classList.remove('hidden');
                            
                            // Fade in success
                            setTimeout(function() {
                                successContainer.classList.remove('opacity-0');
                                successContainer.classList.add('opacity-100', 'scale-100');
                            }, 50);
                        }
                    }, 300);
                }, 500);
                
                // Don't store emails in localStorage - let server handle duplicate detection
                
                // Update rate limiting
                updateRateLimit();
                
            } else {
                throw new Error('Submission failed');
            }
        } catch (error) {
            console.error('Form submission error:', error);
            // Reset button state
            if (btnText) btnText.classList.remove('hidden');
            if (btnLoader) btnLoader.classList.add('hidden');
            if (submitBtn) submitBtn.removeAttribute('disabled');
            
            // Show error (you could make this more elegant)
            alert('Something went wrong. Please try again or contact support.');
        }
        });
    }
    
    // Handle "Add another email" button
    if (addAnotherBtn) {
        addAnotherBtn.addEventListener('click', function() {
        // Reset form
        form.reset();
        
        // Animate transition back to form
        if (successContainer) {
            successContainer.classList.remove('opacity-100', 'scale-100');
            successContainer.classList.add('opacity-0', 'scale-95');
        }
        
        setTimeout(function() {
            if (successContainer) successContainer.classList.add('hidden');
            if (formContainer) formContainer.classList.remove('hidden');
            
            // Reset button state
            if (btnText) btnText.classList.remove('hidden');
            if (btnLoader) btnLoader.classList.add('hidden');
            if (submitBtn) submitBtn.removeAttribute('disabled');
            
            setTimeout(function() {
                if (formContainer) {
                    formContainer.classList.remove('opacity-0', 'scale-95');
                    formContainer.classList.add('opacity-100', 'scale-100');
                }
                
                // Focus on email input
                if (emailInput) emailInput.focus();
            }, 50);
        }, 300);
        });
    }
    
    // No need to check previous submissions - server handles everything
})();
</script>